import cv2
import numpy as np
from matplotlib import pyplot as plt
import math
import random




im = cv2.imread('../images/NO/190828_132418_0000547436_CAM2_NG_NO.bmp', cv2.IMREAD_GRAYSCALE)
im_orig = cv2.imread('../images/NO/190828_132418_0000547436_CAM2_NG_NO.bmp')

print(im.shape)

class Wire:   
            img = np.ones([1200,1600])
            x_locations = []
            top = -1
            bottom = -1
            def __init__(self, img):
                self.img = img  
                # choosing 300 x points randomly to feed the algorithm
                for i in range(300):
                    r = random.SystemRandom()
                    number = r.randint(0,img.shape[1]) 
                    if number not in self.x_locations :
                        self.x_locations.append(i)
                self.top = self.wire_frame(0)
                self.bottom = self.wire_frame(1)
    
             # A function to determine which y position is the most popular among final points y positions        
            def most_frequent(self,List): 
                counter = 0
                num = List[0] 
                for i in List: 
                    curr_frequency = List.count(i) 
                    if(curr_frequency> counter): 
                        counter = curr_frequency 
                        num = i 

                return num 
    
    
            def wire_frame(self,arg):
                    points = []
                    # traversing the image with chosen points, and checking pixel value against threshold = 100
                    # based on arg, start from 0:top or 1:bottom of the image 
                    if (arg == 0):
                        for i in self.x_locations:
                            for j in range(self.img.shape[0]):
                                pixel_value = self.img[j,i]
                                if pixel_value > 100:
                                    points.append([j,i,pixel_value])
                                    break;
                    else:
                        for i in self.x_locations:
                            for j in  reversed(range(self.img.shape[0])):
                                pixel_value = self.img[j,i]
                                if pixel_value > 100:
                                    points.append([j,i,pixel_value])
                                    break;

                    theSum = 0
                    for i in range(len(points)):
                        theSum = theSum + points[i][2]

                    # determining average pixel value for chosen points
                    average = theSum / len(points)
                    ceil = math.ceil(average)
                    floor = math.floor(average)

                    #choosing the final points which are in range of average pixel value found before 
                    f_result = []
                    for i in range(len(points)):
                        if  floor-1 < points[i][2] < ceil+1:
                            point_Y = points[i][0]
                            f_result.append(point_Y)

                   

                    # final y position is the estimation of y by the algorithm
                    found_y_position = self.most_frequent(f_result)
                    return found_y_position
    

# This function returns an object of Test 
def func(image): 
    return Wire(image) 

wire_obj = func(im)
top_position = wire_obj.top
bottom_position = wire_obj.bottom

lineThickness = 6
cv2.line(im_orig, (0, top_position), (1599, top_position), (0,0,255), lineThickness)
cv2.line(im_orig, (0, bottom_position), (1599, bottom_position), (0,0,255), lineThickness)
plt.imshow(im_orig,cmap = 'gray')

cv2.imwrite("result_f.bmp", im_orig) 

